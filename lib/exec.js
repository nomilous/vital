// Generated by CoffeeScript 1.6.3
var actionRunner, compile, file, ipso, join, list, lstatSync, path, program, readFileSync, tag, util, _ref, _ref1;

program = require('commander');

_ref = require('fs'), readFileSync = _ref.readFileSync, lstatSync = _ref.lstatSync;

join = require('path').join;

compile = require('coffee-script').compile;

util = require('also').util;

program.version(JSON.parse(readFileSync(__dirname + '/../package.json'), 'utf8').version);

program.option('-f, --file [file]', 'Run file.');

file = program.parse(process.argv).file;

if (file[0] !== '/') {
  path = join(process.cwd(), file);
}

_ref1 = require('ipso').components(), ipso = _ref1.ipso, tag = _ref1.tag;

if (path.match(/\.coffee$/)) {
  list = eval(compile(readFileSync(path, 'utf8'), {
    bare: true
  }));
} else if (path.match(/\.js$/)) {
  list = eval("list = { " + (readFileSync(path, 'utf8')) + " }");
}

actionRunner = function(text, fn) {
  var decorated;
  decorated = ipso(fn);
  return decorated(function(result) {
    if (result instanceof Error) {
      return console.log(result.stack);
    }
  });
};

try {
  if (typeof list.before.all === 'function') {
    actionRunner('before all', list.before.all);
  }
} catch (_error) {}

setInterval((function() {
  var fn, text, _results;
  try {
    if (typeof list.before.each === 'function') {
      actionRunner('before each', list.before.each);
    }
  } catch (_error) {}
  _results = [];
  for (text in list) {
    if (text === 'before') {
      continue;
    }
    fn = list[text];
    _results.push(actionRunner(text, fn));
  }
  return _results;
}), 1000);
